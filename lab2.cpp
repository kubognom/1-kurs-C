#include "iostream"

#define VAR 111 /*1*/ // Указать три последние цифры своего студенческого билета (шифра)

long long k = 1, n, r, q, N_op;

int f (int x)

{ N_op++; // ( x )

n++; N_op++; // ++

N_op++; // (x > k)

if (x > k) // k - порядок рекурсии

{

r++; N_op++; // ++

// Пример подсчета N_op:

// return f(x/3)+ f(x-2)+f(0); N_op+=8; // / (.) + - (.) + (.) return

N_op+=9; /*4*/ // Указать значение N_op для своего варианта, для нижеследующей строки кода return ...

return /*2*/ f(x-1)+f(x-1)-f(1*x/10); // Здесь указать рекурсивную функцию своего варианта

}

else

{

q++; N_op++; // ++

N_op++; // return

return 1;

}

}

void variant(void)

{

int var = VAR;

int v1, v2, v3;

v1 = var % 10 ;

v2 = var / 10 % 10;

v3 = var / 100 % 10;

std::cout <<std::endl<<std::endl<< "(Student: "<<VAR<<")----> f";

k = 1; // определяем порядок рекурсии:

if (v1 < 3 ) { std::cout <<"(x - 1)"; k = 1; }

else if (v1 < 7 ) { std::cout <<"(x - "<< v1%2+1 <<")"; k = v1%2+1; }

else { std::cout <<"(x - "<<v1%3+1<<")"; k = v1%3+1; }

std::cout << " + f";

if (v2 < 5) { std::cout <<"(x - "<< v2%4+1 <<")"; if (v2%4+1 > k) k = v2%4+1;}

else { std::cout <<"(x - "<< v2%3+1 <<")"; if (v2%3+1 > k) k = v2%3+1;}

if (v1 < v2) { std::cout << " - f("<< v1+1 <<"*x/"<< v2+1 <<")" << std::endl; if ((v1+1)/(v2+1)>k) k = (v1+1)/(v2+1);}

else

if (v1 > v2) { std::cout << " + f("<< v1+1 <<"*x/"<< v1+2 <<")" << std::endl; if ((v1+1)/(v1+2)>k) k = (v1+1)/(v1+2);}

else { std::cout << " * f("<<"x - "<<v3+1<<") " << std::endl; if (v3+1 > k) k = v3+1;}

}

int main(void)

{

variant();

n = 0; // Общее количество вызовов

r = 0; // Общее количество внутренних узлов

q = 0; // Общее количество листьев

N_op=0; // Общее количество инструкций

int N, // Глубина рекурсии

N_max ; // Максимальная глубина рекурсии

N_max = 29; /*3*/ // Указать значение: время работы рекурсивного алгоритма составляло бы ?10^10 числа операций

for (N = 1; N <= N_max; N++)

{ f(N);

std::cout<<" N = "<< N << " r = "<< r << " q = " << q << " r+q = " << r+q << " N_op = " << N_op << "\n";

}

}
